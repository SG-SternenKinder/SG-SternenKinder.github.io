/*! js-cookie v3.0.5 | MIT */
(function (root, factory) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
      define(factory);
    } else {
      root = typeof globalThis !== 'undefined' ? globalThis : root || self;
      var previousCookies = root.Cookies;
      var Cookies = factory();
      Cookies.noConflict = function () {
        root.Cookies = previousCookies;
        return Cookies;
      };
      root.Cookies = Cookies;
    }
  }(this, function () {
    'use strict';
  
    function extend(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          target[key] = source[key];
        }
      }
      return target;
    }
  
    var defaultConverter = {
      read: function (value) {
        return '"' === value[0] ? value.slice(1, -1) : value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
      },
      write: function (value) {
        return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
      }
    };
  
    var defaultAttributes = { path: '/' };
  
    function factory(converter, defaultAttributes) {
      function init(converter, attributes) {
        function set(key, value, options) {
          if (typeof document === 'undefined') {
            return;
          }
  
          options = extend({}, attributes, options);
  
          if (typeof options.expires === 'number') {
            options.expires = new Date(Date.now() + 864e5 * options.expires);
          }
  
          options.expires && (options.expires = options.expires.toUTCString());
  
          key = encodeURIComponent(key)
            .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
            .replace(/[()]/g, escape);
  
          var cookieString = key + '=' + converter.write(value, key);
  
          for (var propName in options) {
            if (options[propName]) {
              cookieString += '; ' + propName;
              if (true !== options[propName]) {
                cookieString += '=' + options[propName].split(';')[0];
              }
            }
          }
  
          document.cookie = cookieString;
        }
  
        function get(key) {
          if (typeof document === 'undefined' || (!arguments.length || key)) {
            var cookies = document.cookie ? document.cookie.split('; ') : [];
            var result = {};
  
            for (var i = 0; i < cookies.length; i++) {
              var parts = cookies[i].split('=');
              var cookie = parts.slice(1).join('=');
  
              try {
                var name = decodeURIComponent(parts[0]);
                result[name] = converter.read(cookie, name);
                if (key === name) {
                  break;
                }
              } catch (e) {}
            }
  
            return key ? result[key] : result;
          }
        }
  
        function remove(key, options) {
          set(key, '', extend({}, options, { expires: -1 }));
        }
  
        return {
          set: set,
          get: get,
          remove: function (key, options) {
            set(key, '', extend({}, options, { expires: -1 }));
          },
          withAttributes: function (attrs) {
            return init(this.converter, extend({}, this.attributes, attrs));
          },
          withConverter: function (conv) {
            return init(extend({}, this.converter, conv), this.attributes);
          }
        };
      }
  
      return init(converter || defaultConverter, defaultAttributes || defaultAttributes);
    }
  
    return factory(defaultConverter, defaultAttributes);
  }));